CompilerIf #PB_Compiler_Version < 530
  IncludeFile "includes/cv_constants.pbi"
  IncludeFile "includes/cv_structures.pbi"
  IncludeFile "includes/cv_macros.pbi"
  IncludePath "binaries"
CompilerElse
  IncludeFile "cv_constants.pbi"
  IncludeFile "cv_structures.pbi"
  IncludeFile "cv_macros.pbi"
  IncludePath "../binaries"
CompilerEndIf

ImportC "opencv_world341.lib"
  cv2DRotationMatrix(x.f, y.f, angle.d, scale.d, *map_matrix)
  cvAbsDiff(*src1, *src2, *dst)
  cvAbsDiffS(*src, *dst, blue.d, green.d, red.d, alpha.d)
  cvAcc(*image, *sum, *mask)
  cvAdaptiveThreshold(*src, *dst, max_value.d, adaptive_method, threshold_type, blocksize.l, paraml.d)
  cvAdd(*src1, *src2, *dst, *mask)
  cvAddS(*src, blue.d, green.d, red.d, alpha.d, *dst, *mask)
  cvAddWeighted(*src1, alpha.d, *src2, beta.d, gamma.d, *dst)
  cvAlloc(size)
  cvAnd(*src1, *src2, *dst, *mask)
  cvAndS(*src, blue.d, green.d, red.d, alpha.d, *dst, *mask)
  cvApproxChains(*src_seq, *storage, method, parameter.d, minimal_perimeter, recursive)
  cvApproxPoly(*src_seq, header_size, *storage, method, eps.d, recursive)
  cvArcLength.d(*curve, start_index, end_index, is_closed)
  cvAttrValue.c(*attr, attr_name.p-ascii)
  cvAvg(*scalar, *arr, *mask)
  cvAvgSdv(*arr, *mean, *std_dev, *mask)
  cvBackProjectPCA(*proj, *mean, *eigenvects, *result)
  cvBoundingRect(*rect, *points, update)
  cvBoxPoints(x.f, y.f, width.f, height.f, angle.f, *pt)
  cvCalcArrBackProject(*image, *backProject, *hist)
  cvCalcArrBackProjectPatch(*image, *dst, width, height, *hist, method, factor.d)
  cvCalcArrHist(*image, *hist, accumulate, *mask)
  cvCalcBayesianProb(*src, number, *dst)
  cvCalcCovarMatrix(*vects, count, *cov_mat, *avg, flags)
  cvCalcEMD2.f(*signature1, *signature2, distance_type, *distance_func, *cost_matrix, *flow, *lower_bound.FLOAT, *userdata)
  cvCalcGlobalOrientation.d(*orientation, *mask, *mhi, timestamp.d, duration.d)
  cvCalcMatMulDeriv(*A, *B, *dABdA, *dABdB)
  cvCalcMotionGradient(*mhi, *mask, *orientation, delta1.d, delta2.d, aperture_size)
  cvCalcOpticalFlowFarneback(*prev, *next, *flow, pyr_scale.d, levels, winsize, iterations, poly_n, poly_sigma.d, flags)
  cvCalcOpticalFlowPyrLK(*prev, *curr, *prev_pyr, *curr_pyr, *prev_features, *curr_features, count, width, height, level, *status, *track_error, type, max_iter, epsilon.d, flags)
  cvCalcPCA(*data, *mean, *eigenvals, *eigenvects, flags)
  cvCalcProbDensity(*hist1, *hist2, *dst_hist, scale.d)
  cvCalibrateCamera2.d(*object_points, *image_points, *point_counts, width, height, *camera_matrix, *distortion_coeffs, *rotation_vectors, *translation_vectors, flags, type, max_iter, epsilon.d)
  cvCalibrationMatrixValues(*calibMatr, width, height, apertureWidth.d, apertureHeight.d, *fovx.DOUBLE, *fovy.DOUBLE, *focalLength.DOUBLE, *principalPoint, *pasp.DOUBLE)
  cvCamShift(*prob_image, x, y, width, height, type, max_iter, epsilon.d, *comp, *box)
  cvCanny(*image, *edges, threshold1.d, threshold2.d, aperture_size, L2gradient)
  cvCartToPolar(*x, *y, *magnitude, *angle, angle_in_degrees)
  cvCbrt.f(value.f)
  cvChangeSeqBlock(*reader, direction)
  cvCheckArr(*arr, flags, min_val.d, max_val.d)
  cvCheckChessboard(*src, width, height)
  cvCheckContourConvexity(*contour)
  cvCheckHardwareSupport(feature)
  cvCheckTermCriteria(*termCriteria, type, max_iter, epsilon.d, default_eps.d, default_max_iters)
  cvCircle(*img, x, y, radius, blue.d, green.d, red.d, alpha.d, thickness, line_type, shift)
  cvClearGraph(*graph)
  cvClearHist(*hist)
  cvClearMemStorage(*storage)
  cvClearND(*arr, *idx)
  cvClearSeq(*seq)
  cvClearSet(*set_header)
  cvClipLine(width, height, x1, y1, x2, y2)
  cvClone(*struct_ptr)
  cvCloneGraph(*graph, *storage)
  cvCloneImage(*image)
  cvCloneMat(*mat)
  cvCloneMatND(*mat)
  cvCloneSparseMat(*mat)
  cvCmp(*src1, *src2, *dst, cmp_op)
  cvCmpS(*src, value.d, *dst, cmp_op)
  cvColorToScalar(*scalar, packed_color.d, arrtype)
  cvCompareHist.d(*hist1, *hist2, method)
  cvCompleteSymm(*matrix, LtoR)
  cvComposeRT(*_rvec1, *_tvec1, *_rvec2, *_tvec2, *_rvec3, *_tvec3, *dr3dr1, *dr3dt1, *dr3dr2, *dr3dt2, *dt3dr1, *dt3dt1, *dt3dr2, *dt3dt2)
  cvComputeCorrespondEpilines(*points, which_image, *fundamental_matrix, *correspondent_lines)
  cvContourArea.d(*contour, start_index, end_index, oriented)
  cvConvertImage(*src, *dst, flags)
  cvConvertMaps(*mapx, *mapy, *mapxy, *mapalpha)
  cvConvertPointsHomogeneous(*src, *dst)
  cvConvertScale(*src, *dst, scale.d, shift.d)
  cvConvertScaleAbs(*src, *dst, scale.d, shift.d)
  cvConvexHull2(*input, *hull_storage, orientation, return_points)
  cvConvexityDefects(*contour, *convexhull, *storage)
  cvCopy(*src, *dst, *mask)
  cvCopyHist(*src, *dst)
  cvCopyMakeBorder(*src, *dst, x, y, bordertype, blue.d, green.d, red.d, alpha.d)
  cvCornerEigenValsAndVecs(*image, *eigenvv, block_size, aperture_size)
  cvCornerHarris(*image, *harris_responce, block_size, aperture_size, k.d)
  cvCornerMinEigenVal(*image, *eigenval, block_size, aperture_size)
  cvCorrectMatches(*F, *points1, *points2, *new_points1, *new_points2)
  cvCountNonZero(*arr)
  cvCreateCameraCapture(index)
  cvCreateChildMemStorage(*parent)
  cvCreateData(*arr)
  cvCreateFileCapture(filename.p-ascii)
  cvCreateFileCaptureWithPreference(filename.p-ascii, apiPreference)
  cvCreateGraph(graph_flags, header_size, vtx_size, edge_size, *storage)
  cvCreateGraphScanner(*graph, *vtx, mask)
  cvCreateHist(dims, *sizes, type, *ranges.FLOAT, uniform)
  cvCreateImage(width, height, depth, channels)
  cvCreateImageHeader(width, height, depth, channels)
  cvCreateKalman(dynam_params, measure_params, control_params)
  cvCreateMat(rows, cols, type)
  cvCreateMatHeader(rows, cols, type)
  cvCreateMatND(dims, *sizes, type)
  cvCreateMatNDHeader(dims, *sizes, type)
  cvCreateMemStorage(block_size)
  cvCreatePOSITObject(*points, numPoints)
  cvCreatePyramid(*img, extra_layers, rate.d, *layer_sizes, *bufarr, calc, filter)
  cvCreateSeq(seq_flags, header_size, elem_size, *storage)
  cvCreateSeqBlock(*writer )
  cvCreateSet(set_flags, header_size, elem_size, *storage)
  cvCreateSparseMat(dims, *sizes, type)
  cvCreateStereoBMState(preset, numberOfDisparities)
  cvCreateStructuringElementEx(cols, rows, anchor_x, anchor_y, shape, *values)
  cvCreateTrackbar(trackbar_name.p-ascii, window_name.p-ascii, *value, count, *on_change)
  cvCreateTrackbar2(trackbar_name.p-ascii, window_name.p-ascii, *value, count, *on_change, *userdata)
  cvCreateVideoWriter(filename.p-ascii, fourcc, fps.d, width, height, is_color)
  cvCrossProduct(*src1, *src2, *dst)
  cvCvtColor(*src, *dst, code, dstCn)
  cvCvtSeqToArray(*seq, *elements, start_index, end_index)
  cvDCT(*src, *dst, flags)
  cvDFT(*src, *dst, flags, nonzero_rows)
  cvDecodeImage(*buf, iscolor)
  cvDecodeImageM(*buf, iscolor)
  cvDecomposeProjectionMatrix(*projMatr, *calibMatr, *rotMatr, *posVect, *rotMatrX, *rotMatrY, *rotMatrZ, *eulerAngles)
  cvDestroyAllWindows()
  cvDestroyWindow(name.p-ascii)
  cvDet(*mat)
  cvDilate(*src, *dst, *element, iterations)
  cvDistTransform(*src, *dst, distance_type, mask_size, *mask.FLOAT, *labels, labelType)
  cvDiv(*src1, *src2, *dst, scale.d)
  cvDotProduct.d(*src1, *src2)
  cvDrawChessboardCorners(*image, width, height, *corners, count, pattern_was_found)
  cvDrawContours(*img, *contour, blue1.d, green1.d, red1.d, alpha1.d, blue2.d, green2.d, red2.d, alpha2.d, maxLevel, thickness, lineType, x, y)
  cvEigenVV(*mat, *evects, *evals, eps.d, lowindex, highindex)
  cvEllipse(*img, x, y, width, height, angle.d, start_angle.d, end_angle.d, blue.d, green.d, red.d, alpha.d, thickness, line_type, shift)
  cvEllipse2Poly(x, y, width, height, angle, arc_start, arc_end, Array pts.CvPoint(1), delta)
  cvEncodeImage(ext.p-ascii, *image, *params)
  cvEndFindContours(*scanner)
  cvEndWriteSeq(*writer)
  cvEndWriteStruct(*fs)
  cvEqualizeHist(*src, *dst)
  cvErode(*src, *dst, *element, iterations)
  cvError(status, func_name.p-ascii, err_msg.p-ascii, file_name.p-ascii, line)
  cvErrorFromIppStatus(ipp_status)
  cvErrorStr(status)
  cvEstimateRigidTransform(*A, *B, *M, full_affine)
  cvExp(*src, *dst)
  cvFastArctan.f(y.f, x.f)
  cvFillConvexPoly(*img, *pts, npts, blue.d, green.d, red.d, alpha.d, line_type, shift)
  cvFillPoly(*img, Array pts.CvPoint(1), *npts, contours, blue.d, green.d, red.d, alpha.d, line_type, shift)
  cvFilter2D(*src, *dst, *kernel, x, y)
  cvFindChessboardCorners(*image, width, height, *corners, *corner_count, flags)
  cvFindContours(*image, *storage, *first_contour, header_size, mode, method, x, y)
  cvFindCornerSubPix(*image, *corners, count, width1, height1, width2, height2, type, max_iter, epsilon.d)
  cvFindExtrinsicCameraParams2(*object_points, *image_points, *camera_matrix, *distortion_coeffs, *rotation_vector, *translation_vector, use_extrinsic_guess)
  cvFindFundamentalMat(*points1, *points2, *fundamental_matrix, method, param1.d, param2.d, *status)
  cvFindGraphEdge(*graph, start_idx, end_idx)
  cvFindGraphEdgeByPtr(*graph, *start_vtx, *end_vtx)
  cvFindHomography(*src_points, *dst_points, *homography, method, ransacReprojThreshold.d, *mask)
  cvFindNextContour(*scanner)
  cvFindStereoCorrespondenceBM(*left, *right, *disparity, *state)
  cvFindType(type_name.p-ascii)
  cvFirstType()
  cvFitEllipse2(*box, *points)
  cvFitLine(*points, dist_type, param.d, reps.d, aeps.d, *line)
  cvFlip(*src, *dst, flip_mode)
  cvFloodFill(*image, x, y, blue1.d, green1.d, red1.d, alpha1.d, blue2.d, green2.d, red2.d, alpha2.d, blue3.d, green3.d, red3.d, alpha3.d, *comp, flags, *mask)
  cvFlushSeqWriter(*writer)
  cvFree_(*pptr)
  cvGEMM(*src1, *src2, alpha.d, *src3, beta.d, *dst, tABC)
  cvGet1D(*scalar, *arr, idx0)
  cvGet2D(*scalar, *arr, idx0, idx1)
  cvGet3D(*scalar, *arr, idx0, idx1, idx2)
  cvGetAffineTransform(*src, *dst, *map_matrix)
  cvGetCaptureDomain(*capture)
  cvGetCaptureProperty.d(*capture, property_id)
  cvGetCentralMoment.d(*moments, x_order, y_order)
  cvGetCols(*arr, *submat, start_col, end_col)
  cvGetDiag(*arr, *submat, diag)
  cvGetDimSize(*arr, index)
  cvGetDims(*arr, *sizes)
  cvGetElemType(*arr)
  cvGetErrInfo(*errcode_desc, *description, *filename, *line)
  cvGetErrMode()
  cvGetErrStatus()
  cvGetFileNode(*fs, *map, *key, create_missing)
  cvGetFileNodeByName(*fs, *map, name.p-ascii)
  cvGetFileNodeName(*node)
  cvGetHashedKey(*fs, name.p-ascii, len, create_missing)
  cvGetHuMoments(*moments, *hu_moments)
  cvGetImage(*arr, *image_header)
  cvGetImageCOI(*image)
  cvGetImageROI(*rect, *image)
  cvGetMat(*arr, *header, *coi, allowND)
  cvGetMinMaxHistValue(*hist, *min_value.FLOAT, *max_value.FLOAT, *min_idx, *max_idx)
  cvGetND(*scalar, *arr, *idx)
  cvGetNormalizedCentralMoment.d(*moments, x_order, y_order)
  cvGetNumThreads()
  cvGetOptimalDFTSize(size0)
  cvGetOptimalNewCameraMatrix(*camera_matrix, *dist_coeffs, width1, height1, alpha.d, *new_camera_matrix, width2, height2, *valid_pixel_ROI, center_principal_point)
  cvGetPerspectiveTransform(*src, *dst, *map_matrix)
  cvGetQuadrangleSubPix(*src, *dst, *map_matrix)
  cvGetRawData(*arr, *data, *step, *roi_size)
  cvGetReal1D.d(*arr, idx0)
  cvGetReal2D.d(*arr, idx0, idx1)
  cvGetReal3D.d(*arr, idx0, idx1, idx2)
  cvGetRealND.d(*arr, *idx)
  cvGetRectSubPix(*src, *dst, x.f, y.f)
  cvGetRootFileNode(*fs, stream_index)
  cvGetRows(*arr, *submat, start_row, end_row, delta_row)
  cvGetSeqElem(*seq, index)
  cvGetSeqReaderPos(*reader)
  cvGetSize(*size, *arr)
  cvGetSpatialMoment.d(*moments, x_order, y_order)
  cvGetSubRect(*arr, *submat, x, y, width, height)
  cvGetTextSize(text_string.p-ascii, *font, *text_size, *baseline)
  cvGetThreadNum()
  cvGetTickCount.q()
  cvGetTickFrequency.d()
  cvGetTrackbarPos(trackbar_name.p-ascii, window_name.p-ascii)
  cvGetValidDisparityROI(*rect, x1, y1, width1, height1, x2, y2, width2, height2, minDisparity, numberOfDisparities, SADWindowSize)
  cvGetWindowHandle(name.p-ascii)
  cvGetWindowImageRect(name.p-ascii)
  cvGetWindowName(window_handle)
  cvGetWindowProperty.d(name.p-ascii, prop_id)
  cvGoodFeaturesToTrack(*image, *eig_image, *temp_image, *corners, corner_count, quality_level.d, min_distance.d, *mask, block_size, use_harris, k.d)
  cvGrabFrame(*capture)
  cvGraphAddEdge(*graph, start_idx, end_idx, *edge, *inserted_edge)
  cvGraphAddEdgeByPtr(*graph, *start_vtx, *end_vtx, *edge, *inserted_edge)
  cvGraphAddVtx(*graph, *vtx, *inserted_vtx)
  cvGraphRemoveEdge(*graph, start_idx, end_idx)
  cvGraphRemoveEdgeByPtr(*graph, *start_vtx, *end_vtx)
  cvGraphRemoveVtx(*graph, index)
  cvGraphRemoveVtxByPtr(*graph, *vtx)
  cvGraphVtxDegree(*graph, vtx_idx)
  cvGraphVtxDegreeByPtr(*graph, *vtx)
  cvGuiBoxReport(status, func_name.p-ascii, err_msg.p-ascii, file_name.p-ascii, line, *userdata)
  cvHaarDetectObjects(*image, *cascade, *storage, scale_factor.d, min_neighbors, flags, width1, height1, width2, height2)
  cvHaveImageReader(filename.p-ascii)
  cvHaveImageWriter(filename.p-ascii)
  cvHoughCircles(*image, *circle_storage, method, dp.d, min_dist.d, param1.d, param2.d, min_radius, max_radius)
  cvHoughLines2(*image, *line_storage, method, rho.d, theta.d, threshold, param1.d, param2.d, min_theta.d, max_theta.d)
  cvInRange(*src, *lower, *upper, *dst)
  cvInRangeS(*src, blue1.d, green1.d, red1.d, alpha1.d, blue2.d, green2.d, red2.d, alpha2.d, *dst)
  cvInitFont(*font, font_face, hscale.d, vscale.d, shear.d, thickness, line_type)
  cvInitImageHeader(*image, width, height, depth, channels, origin, align)
  cvInitIntrinsicParams2D(*object_points, *image_points, *npoints, width, height, *camera_matrix, aspect_ratio.d)
  cvInitLineIterator(*image, x1, y1, x2, y2, *line_iterator, connectivity, left_to_right)
  cvInitMatHeader(*mat, rows, cols, type, *data, cvStep)
  cvInitMatNDHeader(*mat, dims, *sizes, type, *data)
  cvInitNArrayIterator(count, *arrs, *mask, *stubs, *array_iterator, flags)
  cvInitSparseMatIterator(*mat, *mat_iterator)
  cvInitSystem(argc, *argv)
  cvInitTreeNodeIterator(*tree_iterator, *first, max_level)
  cvInitUndistortMap(*camera_matrix, *distortion_coeffs, *mapx, *mapy)
  cvInitUndistortRectifyMap(*camera_matrix, *dist_coeffs, *R, *new_camera_matrix, *mapx, *mapy)
  cvInpaint(*src, *inpaint_mask, *dst, inpaintRange.d, flags)
  cvInsertNodeIntoTree(*node, *parent, *frame)
  cvIntegral(*image, *sum, *sqsum, *tilted_sum)
  cvInvert.d(*src, *dst, method)
  cvKMeans2(*samples, cluster_count, *labels, type, max_iter, epsilon.d, attempts, *rng, flags, *centers, *compactness.DOUBLE)
  cvKalmanCorrect(*kalman, *measurement)
  cvKalmanPredict(*kalman, *control)
  cvLUT(*src, *dst, *lut)
  cvLaplace(*src, *dst, aperture_size)
  cvLine(*img, x1, y1, x2, y2, blue.d, green.d, red.d, alpha.d, thickness, line_type, shift)
  cvLinearPolar(*src, *dst, x.f, y.f, maxRadius.d, flags)
  cvLoad(filename.p-ascii, *memstorage, *name, *real_name)
  cvLoadHaarClassifierCascade(directory.p-ascii, width, height)
  cvLoadImage(filename.p-ascii, iscolor)
  cvLoadImageM(filename.p-ascii, iscolor)
  cvLog(*src, *dst)
  cvLogPolar(*src, *dst, x.f, y.f, M.d, flags)
  cvMahalanobis.d(*vec1, *vec2, *mat)
  cvMakeHistHeaderForArray(dims, *sizes, *hist, *data.FLOAT, *ranges.FLOAT, uniform)
  cvMakeSeqHeaderForArray(seq_type, header_size, elem_size, *elements, total, *seq, *block)
  cvMatchShapes.d(*object1, *object2, method, parameter.d)
  cvMatchTemplate(*image, *templ, *result, method)
  cvMax(*src1, *src2, *dst)
  cvMaxRect(*maxrect, *rect1, *rect2)
  cvMaxS(*src, value.d, *dst)
  cvMeanShift(*prob_image, x, y, width, height, type, max_iter, epsilon.d, *comp)
  cvMemStorageAlloc(*storage, size)
  cvMemStorageAllocString(*string, *storage, *ptr, len)
  cvMerge(*src0, *src1, *src2, *src3, *dst)
  cvMin(*src1, *src2, *dst)
  cvMinAreaRect2(*box, *points, *storage)
  cvMinEnclosingCircle(*points, *center, *radius.FLOAT)
  cvMinEnclosingTriangle(*points, *triangle, *area.DOUBLE)
  cvMinMaxLoc(*arr, *min_val, *max_val, *min_loc, *max_loc, *mask)
  cvMinS(*src, value.d, *dst)
  cvMixChannels(*src, src_count, *dst, dst_count, *from_to, pair_count)
  cvMoments(*arr, *moments, binary)
  cvMorphologyEx(*src, *dst, *temp, *element, operation, iterations)
  cvMoveWindow(name.p-ascii, x, y)
  cvMul(*src1, *src2, *dst, scale.d)
  cvMulSpectrums(*src1, *src2, *dst, flags)
  cvMulTransposed(*src, *dst, order, *delta, scale.d)
  cvMultiplyAcc(*image1, *image2, *acc, *mask)
  cvNamedWindow(name.p-ascii, flags)
  cvNextGraphItem(*scanner)
  cvNextNArraySlice(*array_iterator)
  cvNextTreeNode(*tree_iterator)
  cvNorm.d(*arr1, *arr2, norm_type, *mask)
  cvNormalize(*src, *dst, a.d, b.d, norm_type, *mask)
  cvNormalizeHist(*hist, factor.d)
  cvNot(*src, *dst)
  cvNulDevReport(status, func_name.p-ascii, err_msg.p-ascii, file_name.p-ascii, line, *userdata)
  cvOpenFileStorage(filename.p-ascii, *memstorage, flags, encoding.p-ascii)
  cvOr(*src1, *src2, *dst, *mask)
  cvOrS(*src, blue.d, green.d, red.d, alpha.d, *dst, *mask)
  cvPOSIT(*posit_object, *image_points, focal_length.d, type, max_iter, epsilon.d, *rotation_matrix.FLOAT, *translation_vector.FLOAT)
  cvPerspectiveTransform(*src, *dst, *mat)
  cvPointPolygonTest(*contour, x.f, y.f, measure_dist)
  cvPointSeqFromMat(seq_kind, *mat, *contour_header, *block)
  cvPolarToCart(*magnitude, *angle, *x, *y, angle_in_degrees)
  cvPolyLine(*img, Array pts.CvPoint(1), *npts, contours, is_closed, blue.d, green.d, red.d, alpha.d, thickness, line_type, shift)
  cvPow(*src, *dst, power.d)
  cvPreCornerDetect(*image, *corners, aperture_size)
  cvPrevTreeNode(*tree_iterator)
  cvProjectPCA(*data, *mean, *eigenvects, *result)
  cvProjectPoints2(*object_points, *rotation_vector, *translation_vector, *camera_matrix, *distortion_coeffs, *image_points, *dpdrot, *dpdt, *dpdf, *dpdc, *dpddist, aspect_ratio.d)
  cvPtr1D(*arr, idx0, type)
  cvPtr2D(*arr, idx0, idx1, type)
  cvPtr3D(*arr, idx0, idx1, idx2, type)
  cvPtrND(*arr, *idx, type, create_node, precalc_hashval)
  cvPutText(*img, text.p-ascii, x, y, *font, blue.d, green.d, red.d, alpha.d)
  cvPyrDown(*src, *dst, filter)
  cvPyrMeanShiftFiltering(*src, *dst, sp.d, sr.d, max_level, type, max_iter, epsilon.d)
  cvPyrUp(*src, *dst, filter)
  cvQueryFrame(*capture)
  cvRANSACUpdateNumIters(p.d, err_prob.d, model_points, max_iters)
  cvRQDecomp3x3(*matrixM, *matrixR, *matrixQ, *matrixQx, *matrixQy, *matrixQz, *eulerAngles)
  cvRandArr(*rng, *arr, dist_type, val01.d, val11.d, val21.d, val31.d, val02.d, val12.d, val22.d, val32.d)
  cvRandShuffle(*mat, *rng, iter_factor.d)
  cvRange(*mat, start.d, cvEnd.d)
  cvRawDataToScalar(*data, type, *scalar)
  cvRead(*fs, *node, *attributes)
  cvReadChainPoint(*reader)
  cvReadRawData(*fs, *src, *dst, dt.p-ascii)
  cvReadRawDataSlice(*fs, *reader, count, *dst, dt.p-ascii)
  cvRectangle(*img, left, top, right, bottom, blue.d, green.d, red.d, alpha.d, thickness, line_type, shift)
  cvRectangleR(*img, x, y, width, height, blue.d, green.d, red.d, alpha.d, thickness, line_type, shift)
  cvRedirectError(error_handler, *userdata, *prev_userdata)
  cvReduce(*src, *dst, cvDim, op)
  cvRegisterType(*info)
  cvRelease(*struct_ptr)
  cvReleaseCapture(*capture)
  cvReleaseData(*arr)
  cvReleaseFileStorage(*fs)
  cvReleaseGraphScanner(*scanner)
  cvReleaseHaarClassifierCascade(*cascade)
  cvReleaseHist(*hist)
  cvReleaseImage(*image)
  cvReleaseImageHeader(*image)
  cvReleaseKalman(*kalman)
  cvReleaseMat(*mat)
  cvReleaseMemStorage(*storage)
  cvReleasePOSITObject(*posit_object)
  cvReleasePyramid(*pyramid, extra_layers)
  cvReleaseSparseMat(*mat)
  cvReleaseStereoBMState(*state)
  cvReleaseStructuringElement(*element)
  cvReleaseVideoWriter(*writer)
  cvRemap(*src, *dst, *mapx, *mapy, flags, blue.d, green.d, red.d, alpha.d)
  cvRemoveNodeFromTree(*node, *frame)
  cvRepeat(*src, *dst)
  cvReprojectImageTo3D(*disparityImage, *_3dImage, *Q, handleMissingValues)
  cvResetImageROI(*image)
  cvReshape(*arr, *header, new_cn, new_rows)
  cvReshapeMatND(*arr, sizeof_header, *header, new_cn, new_dims, *new_sizes)
  cvResize(*src, *dst, interpolation)
  cvResizeWindow(name.p-ascii, width, height)
  cvRestoreMemStoragePos(*storage, *pos)
  cvRetrieveFrame(*capture, streamIdx)
  cvRodrigues2(*src, *dst, *jacobian)
  cvRunHaarClassifierCascade(*cascade, x, y, start_stage)
  cvRunningAvg(*image, *acc, alpha.d, *mask)
  cvSVBkSb(*W, *U, *V, *B, *X, flags)
  cvSVD(*A, *W, *U, *V, flags)
  cvSampleLine(*image, x1, y1, x2, y2, *buffer, connectivity)
  cvSave(filename.p-ascii, *struct_ptr, name.p-ascii, comment.p-ascii, *attributes, *next)
  cvSaveImage(filename.p-ascii, *image, *params)
  cvSaveMemStoragePos(*storage, *pos)
  cvScalarToRawData(*scalar, *data, type, extend_to_12)
  cvScaleAdd(*src1, blue.d, green.d, red.d, alpha.d, *src2, *dst)
  cvSegmentMotion(*mhi, *seg_mask, *storage, timestamp.d, seg_thresh.d)
  cvSeqElemIdx(*seq, *element, *block)
  cvSeqInsert(*seq, before_index, *element)
  cvSeqInsertSlice(*seq, before_index, *from_arr)
  cvSeqInvert(*seq)
  cvSeqPartition(*seq, *storage, *labels, is_equal, *userdata)
  cvSeqPop(*seq, *element)
  cvSeqPopFront(*seq, *element)
  cvSeqPopMulti(*seq, *elements, count, in_front)
  cvSeqPush(*seq, *element)
  cvSeqPushFront(*seq, *element)
  cvSeqPushMulti(*seq, *elements, count, in_front)
  cvSeqRemove(*seq, index)
  cvSeqRemoveSlice(*seq, start_index, end_index)
  cvSeqSearch(*seq, *elem, func, is_sorted, *elem_idx, *userdata)
  cvSeqSlice(*seq, start_index, end_index, *storage, copy_data)
  cvSeqSort(*seq, func, *userdata)
  cvSet(*arr, blue.d, green.d, red.d, alpha.d, *mask)
  cvSet1D(*arr, idx0, blue.d, green.d, red.d, alpha.d)
  cvSet2D(*arr, idx0, idx1, blue.d, green.d, red.d, alpha.d)
  cvSet3D(*arr, idx0, idx1, idx2, blue.d, green.d, red.d, alpha.d)
  cvSetAdd(*set_header, *elem, *inserted_elem)
  cvSetCaptureProperty(*capture, property_id, value.d)
  cvSetData(*arr, *data, iStep)
  cvSetErrMode(mode)
  cvSetErrStatus(status)
  cvSetHistBinRanges(*hist, *ranges.FLOAT, uniform)
  cvSetIPLAllocators(create_header, allocate_data, deallocate, create_roi, clone_image)
  cvSetIdentity(*mat, val0.d, val1.d, val2.d, val3.d)
  cvSetImageCOI(*image, coi)
  cvSetImageROI(*image, x, y, width, height)
  cvSetImagesForHaarClassifierCascade(*cascade, *sum, *sqsum, *tilted_sum, scale.d)
  cvSetMouseCallback(*window_name, *on_mouse, *param)
  cvSetND(*arr, *idx, blue.d, green.d, red.d, alpha.d)
  cvSetNumThreads(threads)
  cvSetOpenGlContext(*window_name)
  cvSetOpenGlDrawCallback(*window_name, *callback, *userdata)
  cvSetPostprocessFuncWin32_(*callback)
  cvSetPreprocessFuncWin32_(*callback)
  cvSetReal1D(*arr, idx0, value.d)
  cvSetReal2D(*arr, idx0, idx1, value.d)
  cvSetReal3D(*arr, idx0, idx1, idx2, value.d)
  cvSetRealND(*arr, *idx, value.d)
  cvSetRemove(*set_header, index)
  cvSetSeqBlockSize(*seq, delta_elems)
  cvSetSeqReaderPos(*reader, index, is_relative)
  cvSetTrackbarMax(trackbar_name.p-ascii, window_name.p-ascii, maxval)
  cvSetTrackbarMin(trackbar_name.p-ascii, window_name.p-ascii, minval)
  cvSetTrackbarPos(trackbar_name.p-ascii, window_name.p-ascii, pos)
  cvSetWindowProperty(name.p-ascii, prop_id, prop_value.d)
  cvSetZero(*arr)
  cvShowImage(name.p-ascii, *image)
  cvSliceLength(*slice, *seq)
  cvSmooth(*src, *dst, smoothtype, size1, size2, sigma1.d, sigma2.d)
  cvSobel(*src, *dst, xorder, yorder, aperture_size)
  cvSolve(*src1, *src2, *dst, method)
  cvSolveCubic(*coeffs, *roots)
  cvSolvePoly(*coeffs, *roots2, maxiter, fig)
  cvSort(*src, *dst, *idxmat, flags)
  cvSplit(*src, *dst0, *dst1, *dst2, *dst3)
  cvSquareAcc(*image, *sqsum, *mask)
  cvStartAppendToSeq(*seq, *writer)
  cvStartFindContours(*image, *storage, header_size, mode, method, x, y)
  cvStartNextStream(*fs)
  cvStartReadChainPoints(*chain, *reader)
  cvStartReadRawData(*fs, *src, *reader)
  cvStartReadSeq(*seq, *reader, reverse)
  cvStartWindowThread()
  cvStartWriteSeq(seq_flags, header_size, elem_size, *storage, *writer)
  cvStartWriteStruct(*fs, name.p-ascii, struct_flags, type_name.p-ascii, *attributes)
  cvStdErrReport(status, func_name.p-ascii, err_msg.p-ascii, file_name.p-ascii, line, *userdata)
  cvStereoCalibrate.d(*object_points, *image_points1, *image_points2, *npoints, *camera_matrix1, *dist_coeffs1, *camera_matrix2, *dist_coeffs2, width, height, *R, *T, *E, *F, type, max_iter, epsilon.d, flags)
  cvStereoRectify(*camera_matrix1, *camera_matrix2, *dist_coeffs1, *dist_coeffs2, width1, height1, *R, *T, *R1, *R2, *P1, *P2, *Q, flags, alpha.d, width2, height2, *valid_pix_ROI1, *valid_pix_ROI2)
  cvStereoRectifyUncalibrated(*points1, *points2, *F, width, height, *H1, *H2, threshold.d)
  cvSub(*src1, *src2, *dst, *mask)
  cvSubRS(*src, blue.d, green.d, red.d, alpha.d, *dst, *mask)
  cvSubstituteContour(*scanner, *new_contour)
  cvSum(*scalar, *arr)
  cvThreshHist(*hist, threshold.d)
  cvThreshold.d(*src, *dst, threshold.d, max_value.d, threshold_type)
  cvTrace(*scalar, *mat)
  cvTransform(*src, *dst, *transmat, *shiftvec)
  cvTranspose(*src, *dst)
  cvTreeToNodeSeq(*first, header_size, *storage)
  cvTriangulatePoints(*projMatr1, *projMatr2, *projPoints1, *projPoints2, *points4D)
  cvTypeOf(*struct_ptr)
  cvUndistort2(*src, *dst, *camera_matrix, *distortion_coeffs, *new_camera_matrix)
  cvUndistortPoints(*src, *dst, *camera_matrix, *dist_coeffs, *R, *P)
  cvUnregisterType(type_name.p-ascii)
  cvUpdateMotionHistory(*silhouette, *mhi, timestamp.d, duration.d)
  cvUpdateWindow(*window_name)
  cvUseOptimized(on_off)
  cvValidateDisparity(*disparity, *cost, minDisparity, numberOfDisparities, disp12MaxDiff)
  cvWaitKey(delay)
  cvWarpAffine(*src, *dst, *map_matrix, flags, blue.d, green.d, red.d, alpha.d)
  cvWarpPerspective(*src, *dst, *map_matrix, flags, blue.d, green.d, red.d, alpha.d)
  cvWatershed(*image, *markers)
  cvWrite(*fs, name.p-ascii, *ptr, *attributes)
  cvWriteComment(*fs, comment.p-ascii, eol_comment)
  cvWriteFileNode(*fs, new_node_name.p-ascii, *node, embed)
  cvWriteFrame(*writer, *image)
  cvWriteInt(*fs, name.p-ascii, value)
  cvWriteRawData(*fs, *src, len, dt.p-ascii)
  cvWriteRawDataBase64(*fs, *src, len, dt.p-ascii)
  cvWriteReal(*fs, name.p-ascii, value.d)
  cvWriteString(*fs, name.p-ascii, str.p-ascii, quote)
  cvXor(*src1, *src2, *dst, *mask)
  cvXorS(*src, blue.d, green.d, red.d, alpha.d, *dst, *mask)
EndImport

Procedure cvAbs(*src, *dst)
  cvAbsDiffS(*src, *dst, 0, 0, 0, 0)
EndProcedure

Procedure cvCalcBackProject(*image.IplImage, *dst, *hist)
  cvCalcArrBackProject(*image, *dst, *hist)
EndProcedure

Procedure cvCalcHist(*image.IplImage, *hist, accumulate, *mask)
  cvCalcArrHist(*image, *hist, accumulate, *mask)
EndProcedure

Procedure.d cvContourPerimeter(*contour)
  ProcedureReturn cvArcLength(*contour, 0, #CV_WHOLE_SEQ_END_INDEX, -1)
EndProcedure

Procedure cvConvert(*src, *dst)
  cvConvertScale(*src, *dst, 1, 0)
EndProcedure

Procedure cvEllipseBox(*img, x.f, y.f, width.f, height.f, angle.f, blue.d, green.d, red.d, alpha.d, thickness, line_type, shift)
  axes.CvSize
  axes\width = Round(width * 0.5, #PB_Round_Nearest)
  axes\height = Round(height * 0.5, #PB_Round_Nearest)
  cvEllipse(*img, x, y, axes\width, axes\height, angle, 0, 360, blue, green, red, alpha, thickness, line_type, shift)
EndProcedure

Procedure cvGetCol(*arr, *submat, col)
  ProcedureReturn cvGetCols(*arr, *submat, col, col + 1)
EndProcedure

Procedure.f cvGetHistValue_1D(*hist.CvHistogram, idx0)
  ProcedureReturn cvPtr1D(*hist\bins, idx0, #Null)
EndProcedure

Procedure.f cvGetHistValue_2D(*hist.CvHistogram, idx0, idx1)
  ProcedureReturn cvPtr2D(*hist\bins, idx0, idx1, #Null)
EndProcedure

Procedure.f cvGetHistValue_3D(*hist.CvHistogram, idx0, idx1, idx2)
  ProcedureReturn cvPtr3D(*hist\bins, idx0, idx1, idx2, #Null)
EndProcedure

Procedure.f cvGetHistValue_nD(*hist.CvHistogram, *idx)
  ProcedureReturn cvPtrND(*hist\bins, *idx, 0, 1, #Null)
EndProcedure

Procedure cvGetRow(*arr, *submat, row)
  ProcedureReturn cvGetRows(*arr, *submat, row, row + 1, 1)
EndProcedure

Procedure cvMatMulAdd(*src1, *src2, *src3, *dst)
  cvGEMM(*src1, *src2, 1, *src3, 1, *dst, 0)
EndProcedure

Procedure cvMatMul(*src1, *src2, *dst)
  cvMatMulAdd(*src1, *src2, #Null, *dst)
EndProcedure

Procedure.f cvQueryHistValue_1D(*hist.CvHistogram, idx0)
  ProcedureReturn cvGetReal1D(*hist\bins, idx0)
EndProcedure

Procedure.f cvQueryHistValue_2D(*hist.CvHistogram, idx0, idx1)
  ProcedureReturn cvGetReal2D(*hist\bins, idx0, idx1)
EndProcedure

Procedure.f cvQueryHistValue_3D(*hist.CvHistogram, idx0, idx1, idx2)
  ProcedureReturn cvGetReal3D(*hist\bins, idx0, idx1, idx2)
EndProcedure

Procedure.f cvQueryHistValue_nD(*hist.CvHistogram, *idx)
  ProcedureReturn cvGetRealND(*hist\bins, *idx)
EndProcedure

Procedure cvReadByName(*fs, *map, name.s, *attributes)
  ProcedureReturn cvRead(*fs, cvGetFileNodeByName(*fs, *map, name), *attributes)
EndProcedure

Procedure cvReadInt(*node.CvFileNode, default_value)
  If Not *node
    Result = default_value
  ElseIf CV_NODE_IS_INT(*node\tag)
    Result = *node\data
  ElseIf CV_NODE_IS_REAL(*node\tag)
    Result = Round(*node\data, #PB_Round_Nearest)
  Else
    Result = $7fffffff
  EndIf
  ProcedureReturn Result
EndProcedure

Procedure cvReadIntByName(*fs, *map, name.s, default_value)
  ProcedureReturn cvReadInt(cvGetFileNodeByName(*fs, *map, name), default_value)
EndProcedure

Procedure.d cvReadReal(*node.CvFileNode, default_value.d)
  Define Result.d

  If Not *node
    Result = default_value
  ElseIf CV_NODE_IS_INT(*node\tag)
    Result = Int(*node\data)
  ElseIf CV_NODE_IS_REAL(*node\tag)
    Result = *node\data
  Else
    Result = $1e310
  EndIf
  ProcedureReturn Result
EndProcedure

Procedure.d cvReadRealByName(*fs, *map, name.s, default_value.d)
  ProcedureReturn cvReadReal(cvGetFileNodeByName(*fs, *map, name), default_value)
EndProcedure

Procedure.c cvReadString(*node.CvFileNode, *default_value)
  Define Result.c

  If Not *node
    Result = default_value
  ElseIf CV_NODE_IS_STRING(*node\tag)
    Result = *node\data\str\ptr
  Else
    Result = 0
  EndIf
  ProcedureReturn Result
EndProcedure

Procedure.c cvReadStringByName(*fs, *map, name.s, default_value.c)
  ProcedureReturn cvReadString(cvGetFileNodeByName(*fs, *map, name), default_value)
EndProcedure

Procedure cvSubS(*src, val0.d, val1.d, val2.d, val3.d, *dst, *mask)
  cvAddS(*src, -val0, -val1, -val2, -val3, *dst, *mask)
EndProcedure

opencv_ffmpeg341 = OpenLibrary(#PB_Any, "opencv_ffmpeg341.dll")

If opencv_ffmpeg341
  PrototypeC protoCreate_InputMediaStream_FFMPEG(filename.p-ascii, *codec, *chroma_format, *width, *height)
  PrototypeC protoCreate_OutputMediaStream_FFMPEG(filename.p-ascii, width, height, fps.d)
  PrototypeC protoCreateFileCapture_FFMPEG(filename.p-ascii)
  PrototypeC protoCreateVideoWriter_FFMPEG(filename.p-ascii, fourcc, fps.d, width, height, is_color)
  PrototypeC.d protoGetCaptureProperty_FFMPEG(*capture, property_id)
  PrototypeC protoGrabFrame_FFMPEG(*capture)
  PrototypeC protoReleaseCapture_FFMPEG(*capture)
  PrototypeC protoReleaseVideoWriter_FFMPEG(*writer)
  PrototypeC protoRetrieveFrame_FFMPEG(*capture, *data.BYTE, *step, *width, *height, *cn)
  PrototypeC protoSetCaptureProperty_FFMPEG(*capture, property_id, value.d)
  PrototypeC protoWriteFrame_FFMPEG(*writer, *data.BYTE, cvStep, width, height, cn, origin)
  PrototypeC protoRead_InputMediaStream_FFMPEG(*stream, *data.BYTE, *size, *endOfFile)
  PrototypeC protoRelease_InputMediaStream_FFMPEG(*stream)
  PrototypeC protoRelease_OutputMediaStream_FFMPEG(*stream)
  PrototypeC protoWrite_OutputMediaStream_FFMPEG(*stream, *data.BYTE, size, keyFrame)
  Global create_InputMediaStream_FFMPEG.protoCreate_InputMediaStream_FFMPEG
  Global create_OutputMediaStream_FFMPEG.protoCreate_OutputMediaStream_FFMPEG
  Global cvCreateFileCapture_FFMPEG.protoCreateFileCapture_FFMPEG
  Global cvCreateVideoWriter_FFMPEG.protoCreateVideoWriter_FFMPEG
  Global cvGetCaptureProperty_FFMPEG.protoGetCaptureProperty_FFMPEG
  Global cvGrabFrame_FFMPEG.protoGrabFrame_FFMPEG
  Global cvReleaseCapture_FFMPEG.protoReleaseCapture_FFMPEG
  Global cvReleaseVideoWriter_FFMPEG.protoReleaseVideoWriter_FFMPEG
  Global cvRetrieveFrame_FFMPEG.protoRetrieveFrame_FFMPEG
  Global cvSetCaptureProperty_FFMPEG.protoSetCaptureProperty_FFMPEG
  Global cvWriteFrame_FFMPEG.protoWriteFrame_FFMPEG
  Global read_InputMediaStream_FFMPEG.protoRead_InputMediaStream_FFMPEG
  Global release_InputMediaStream_FFMPEG.protoRelease_InputMediaStream_FFMPEG
  Global release_OutputMediaStream_FFMPEG.protoRelease_OutputMediaStream_FFMPEG
  Global write_OutputMediaStream_FFMPEG.protoWrite_OutputMediaStream_FFMPEG
  create_InputMediaStream_FFMPEG = GetFunction(opencv_ffmpeg341, "create_InputMediaStream_FFMPEG")
  create_OutputMediaStream_FFMPEG = GetFunction(opencv_ffmpeg341, "create_OutputMediaStream_FFMPEG")
  cvCreateFileCapture_FFMPEG = GetFunction(opencv_ffmpeg341, "cvCreateFileCapture_FFMPEG")
  cvCreateVideoWriter_FFMPEG = GetFunction(opencv_ffmpeg341, "cvCreateVideoWriter_FFMPEG")
  cvGetCaptureProperty_FFMPEG = GetFunction(opencv_ffmpeg341, "cvGetCaptureProperty_FFMPEG")
  cvGrabFrame_FFMPEG = GetFunction(opencv_ffmpeg341, "cvGrabFrame_FFMPEG")
  cvReleaseCapture_FFMPEG = GetFunction(opencv_ffmpeg341, "cvReleaseCapture_FFMPEG")
  cvReleaseVideoWriter_FFMPEG = GetFunction(opencv_ffmpeg341, "cvReleaseVideoWriter_FFMPEG")
  cvRetrieveFrame_FFMPEG = GetFunction(opencv_ffmpeg341, "cvRetrieveFrame_FFMPEG")
  cvSetCaptureProperty_FFMPEG = GetFunction(opencv_ffmpeg341, "cvSetCaptureProperty_FFMPEG")
  cvWriteFrame_FFMPEG = GetFunction(opencv_ffmpeg341, "cvWriteFrame_FFMPEG")
  read_InputMediaStream_FFMPEG = GetFunction(opencv_ffmpeg341, "read_InputMediaStream_FFMPEG")
  release_InputMediaStream_FFMPEG = GetFunction(opencv_ffmpeg341, "release_InputMediaStream_FFMPEG")
  release_OutputMediaStream_FFMPEG = GetFunction(opencv_ffmpeg341, "release_OutputMediaStream_FFMPEG")
  write_OutputMediaStream_FFMPEG = GetFunction(opencv_ffmpeg341, "write_OutputMediaStream_FFMPEG")
EndIf

IncludeFile "../includes/pb_procedures.pbi"
; IDE Options = PureBasic 5.70 LTS beta 3 (Windows - x64)
; CursorPosition = 11
; Folding = ----
; DisableDebugger